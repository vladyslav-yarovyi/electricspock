/*
 * Copyright 2016 Herman Cheung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'groovyx.android'

android {
    compileSdkVersion 34
    buildToolsVersion "34.0.0"
    defaultConfig {
        applicationId "hkhc.electricspock.sample"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    applicationVariants.all { variant ->
        afterEvaluate {
            if (variant.name == 'debug') {
                def testName = ":${project.name}:compile${variant.name.capitalize()}UnitTestGroovyWithGroovyc"
                tasks.matching { it.name.startsWith('test') && it.name.endsWith('UnitTest') }.all {
                    dependsOn testName
                    mustRunAfter testName
                }
            }
        }
    }
}

// Needed for pre-AGP 3.0 only
//sourceSets {
//    test {
//        // Class.getResource won't work in unit test without this line.
//        // It ensure the test resources are in the same directory as classes
//        output.resourcesDir = "build/classes/test"
//    }
//}


dependencies {
    implementation 'com.google.android.gms:play-services-ads:12.0.1'
//    implementation 'androidx.annotation:annotation-jvm:1.7.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
//    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })

    testImplementation fileTree(dir: 'build/intermediates/compile_manifest_jar/debug', include: ['*.aar', '*.jar'], exclude: [])


    testImplementation 'junit:junit:4.12'

    testImplementation project(':electricspock-electricspock')
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'org.robolectric:annotations:4.11.1'
    testImplementation 'org.robolectric:shadows-multidex:4.11.1'
    testImplementation 'org.robolectric:shadows-framework:4.11.1'
    testImplementation 'org.robolectric:shadowapi:4.11.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.23'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'

    testImplementation( 'com.athaydes:spock-reports:1.3.2' ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testImplementation 'org.slf4j:slf4j-api:1.7.13' // needed by spock-reports
    testImplementation 'org.slf4j:slf4j-simple:1.7.13' // needed by spock-reports
}

//project.tasks.named("testDebugUnitTest") {
//    mustRunAfter("compileDebugUnitTestGroovyWithGroovyc")
//}

// Assuming these are the task names in your project
//def compileDebugUnitTestGroovyWithGroovycTask = project.tasks.getByName(':sample:compileDebugUnitTestGroovyWithGroovyc')
//def testDebugUnitTestTask = project.tasks.getByName(':sample:testDebugUnitTest')
//testDebugUnitTestTask.dependsOn(compileDebugUnitTestGroovyWithGroovycTask)


//afterEvaluate {
//    tasks.matching { it.name.startsWith('test') && it.name.endsWith('UnitTest') }.all {
//        dependsOn ':sample:compileDebugUnitTestGroovyWithGroovyc'
//        mustRunAfter ':sample:compileDebugUnitTestGroovyWithGroovyc'
//    }
//}